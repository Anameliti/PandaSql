##Criando funções no pandas

import pandas as pd

salario = pd.read_csv(r'C:\Users\Ana Carolina Meliti\Downloads\archive\ds_salaries.csv')
salario.head()

def ajuste_salario(salary):
    salario1 = str(salary).replace('$', '').replace(',', '') # Conversão de String para Float
    output = float(salario1)
    return output

salario['salary'] = salario['salary'].apply(ajuste_salario)
salario['salary'].head()

##Library PandaSQL

import pandas as pd
import pandasql as ps

salario = pd.read_csv(r'C:\Users\Ana Carolina Meliti\Downloads\archive\ds_salaries.csv')
salario.head()

query = """SELECT * from salario limit 5"""
ps.sqldf(query, locals())

##Retirando a media salarial por nível de experiencia

import pandasql as ps 
import pandas as pd

salario = pd.read_csv(r'C:\Users\Ana Carolina Meliti\Downloads\archive\ds_salaries.csv')

query = """
SELECT experience_level, avg(salary) as avg_salary
from salario
group by experience_level
order by avg_salary desc
"""
ps.sqldf(query, locals())

##Library Sweetviz

import pandas as pd 
import sweetviz as sv
import numpy as np

salario = pd.read_csv(r'C:\Users\Ana Carolina Meliti\Downloads\archive\ds_salaries.csv')
salario.head()

report = sv.analyze(salario)
report.show_html(layout='vertical') 

##Comando comparação

import pandas as pd
import sweetviz as sv
import numpy as np

salario = pd.read_csv(r'C:\Users\Ana Carolina Meliti\Downloads\archive\ds_salaries.csv')

msk = np.random.rand(len(salario)) < 0.8
train = salario[msk]
teste = salario[msk]

train.head() #80% de tabela

report = sv.compare([train, 'training set'], [teste, 'testing set'])
report.show_html(layout='vertical')

##Funções de Excel no PandaSql
##Somase e Contase

##Realizando a leitura do dataset

df = pd.read_csv(r'C:\Users\Ana Carolina Meliti\Downloads\marketing_campaign.csv', delimiter='\t')
df.head()

##Utilização de query para realizar as funcoes

import pandasql as ps

query = ''' SELECT Marital_Status, sum(Kidhome) as soma_Kidhome
FROM df
group by Marital_Status'''
ps.sqldf(query, locals())

query = ''' select Marital_Status, count(KidHome) as cont_KidHome
from df
group by Marital_Status'''

ps.sqldf(query, locals())

##Utilização do comando LOC para realizar as funcoes

df.loc[df['Marital_Status']=='Single']['Kidhome'].sum()

df.loc[df['Marital_Status']=='Single']['Kidhome'].count()

#Desmembrando o loc acima

df_filter = df.loc[df['Marital_Status'].isin(['Single','Married','Divorced'])]
df_filter.groupby('Marital_Status').count()

##Tabela Dinamica com Python/Pandas

import pandas as pd
import numpy as np

data = pd.read_csv(r'C:\Users\Ana Carolina Meliti\Downloads\marketing_campaign.csv', delimiter='\t')
data.head()

#Sintaxe da tabela
#pd.pivot_table(data, index=, aggfunc=)

#fazendo um filtro do dataset antes

data_filter = data[data['Marital_Status'].isin(['Single', 'Married', 'Divorced'])]

#Somando e separando por estado civil e somando cada categoria sem o filtro de campos

pd.pivot_table(data_filter, 
               index='Marital_Status',
               aggfunc=sum)

#Tabela Dinamica tratada apenas com os valores de soma

pd.pivot_table(data_filter, 
               index='Marital_Status',
               values=['Income','AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5'],
               aggfunc=sum)


#Incluindo mais indices para a tabela dinamica e salvando em CSV

pivot_table = pd.pivot_table(data, index=['Marital_Status','MntWines'],
              values=['Income','AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5'],
              aggfunc=np.sum)
pivot_table.to_csv("pivot_table.csv", sep=';', decimal=",")

#Realizando a ultima modificação na tabela dinamica 

pd.pivot_table(data, index=['Marital_Status'],
              values=['Income','AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3'],
              fill_value='0',
              columns='Kidhome',
              aggfunc= np.sum)
